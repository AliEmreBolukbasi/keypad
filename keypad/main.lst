CCS PCM C Compiler, Version 5.007, 61971               18-Ara-20 22:45

               Filename:   C:\Users\USER\Documents\proteus\keypad\main.lst

               ROM used:   206 words (3%)
                           Largest free fragment is 2048
               RAM used:   7 (2%) at main() level
                           8 (2%) worst case
               Stack used: 0 locations
               Stack size: 8

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   0B2
0003:  NOP
.................... #include <main.h> 
.................... #include <16F877A.h> 
.................... //////// Standard Header file for the PIC16F877A device //////////////// 
.................... #device PIC16F877A 
0004:  BCF    0A.0
0005:  BCF    0A.1
0006:  BCF    0A.2
0007:  ADDWF  02,F
0008:  RETLW  3F
0009:  RETLW  06
000A:  RETLW  5B
000B:  RETLW  4F
000C:  RETLW  66
000D:  RETLW  6D
000E:  RETLW  7D
000F:  RETLW  07
0010:  RETLW  7F
0011:  RETLW  6F
....................  
.................... #list 
....................  
.................... #device ADC=16 
....................  
.................... #FUSES NOWDT                 	//No Watch Dog Timer 
.................... #FUSES NOBROWNOUT            	//No brownout reset 
.................... #FUSES NOLVP                 	//No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
....................  
.................... #use delay(crystal=20000000) 
0012:  MOVLW  22
0013:  MOVWF  04
0014:  BCF    03.7
0015:  MOVF   00,W
0016:  BTFSC  03.2
0017:  GOTO   025
0018:  MOVLW  06
0019:  MOVWF  78
001A:  CLRF   77
001B:  DECFSZ 77,F
001C:  GOTO   01B
001D:  DECFSZ 78,F
001E:  GOTO   01A
001F:  MOVLW  7B
0020:  MOVWF  77
0021:  DECFSZ 77,F
0022:  GOTO   021
0023:  DECFSZ 00,F
0024:  GOTO   018
0025:  RETURN
....................  
....................  
.................... int tus; 
....................  
....................  
....................  int keypad(){ 
....................      delay_ms(50); 
0026:  MOVLW  32
0027:  MOVWF  22
0028:  CALL   012
....................       
....................      output_high(pin_d0); 
0029:  BSF    03.5
002A:  BCF    08.0
002B:  BCF    03.5
002C:  BSF    08.0
....................      if(input(pin_d4)){ 
002D:  BSF    03.5
002E:  BSF    08.4
002F:  BCF    03.5
0030:  BTFSS  08.4
0031:  GOTO   037
....................      delay_ms(50); 
0032:  MOVLW  32
0033:  MOVWF  22
0034:  CALL   012
....................      tus=3; 
0035:  MOVLW  03
0036:  MOVWF  20
....................      } 
....................      if(input(pin_d5)){ 
0037:  BSF    03.5
0038:  BSF    08.5
0039:  BCF    03.5
003A:  BTFSS  08.5
003B:  GOTO   041
....................      delay_ms(50); 
003C:  MOVLW  32
003D:  MOVWF  22
003E:  CALL   012
....................      tus=6; 
003F:  MOVLW  06
0040:  MOVWF  20
....................      } 
....................      if(input(pin_d6)){ 
0041:  BSF    03.5
0042:  BSF    08.6
0043:  BCF    03.5
0044:  BTFSS  08.6
0045:  GOTO   04B
....................      delay_ms(50); 
0046:  MOVLW  32
0047:  MOVWF  22
0048:  CALL   012
....................      tus=9; 
0049:  MOVLW  09
004A:  MOVWF  20
....................      } 
....................      output_low(pin_d0); 
004B:  BSF    03.5
004C:  BCF    08.0
004D:  BCF    03.5
004E:  BCF    08.0
....................        
....................      delay_ms(50); 
004F:  MOVLW  32
0050:  MOVWF  22
0051:  CALL   012
....................      output_high(pin_d1); 
0052:  BSF    03.5
0053:  BCF    08.1
0054:  BCF    03.5
0055:  BSF    08.1
....................      if(input(pin_d4)){ 
0056:  BSF    03.5
0057:  BSF    08.4
0058:  BCF    03.5
0059:  BTFSS  08.4
005A:  GOTO   060
....................      delay_ms(50); 
005B:  MOVLW  32
005C:  MOVWF  22
005D:  CALL   012
....................      tus=2; 
005E:  MOVLW  02
005F:  MOVWF  20
....................      } 
....................      if(input(pin_d5)){ 
0060:  BSF    03.5
0061:  BSF    08.5
0062:  BCF    03.5
0063:  BTFSS  08.5
0064:  GOTO   06A
....................      delay_ms(50); 
0065:  MOVLW  32
0066:  MOVWF  22
0067:  CALL   012
....................      tus=5; 
0068:  MOVLW  05
0069:  MOVWF  20
....................      } 
....................      if(input(pin_d6)){ 
006A:  BSF    03.5
006B:  BSF    08.6
006C:  BCF    03.5
006D:  BTFSS  08.6
006E:  GOTO   074
....................      delay_ms(50); 
006F:  MOVLW  32
0070:  MOVWF  22
0071:  CALL   012
....................      tus=8; 
0072:  MOVLW  08
0073:  MOVWF  20
....................      } 
....................      if(input(pin_d7)){ 
0074:  BSF    03.5
0075:  BSF    08.7
0076:  BCF    03.5
0077:  BTFSS  08.7
0078:  GOTO   07D
....................      delay_ms(50); 
0079:  MOVLW  32
007A:  MOVWF  22
007B:  CALL   012
....................      tus=0; 
007C:  CLRF   20
....................      } 
....................       output_low(pin_d1); 
007D:  BSF    03.5
007E:  BCF    08.1
007F:  BCF    03.5
0080:  BCF    08.1
....................       delay_ms(50); 
0081:  MOVLW  32
0082:  MOVWF  22
0083:  CALL   012
....................  
....................      output_high(pin_d2); 
0084:  BSF    03.5
0085:  BCF    08.2
0086:  BCF    03.5
0087:  BSF    08.2
....................       
....................      if(input(pin_d4)){ 
0088:  BSF    03.5
0089:  BSF    08.4
008A:  BCF    03.5
008B:  BTFSS  08.4
008C:  GOTO   092
....................      delay_ms(50); 
008D:  MOVLW  32
008E:  MOVWF  22
008F:  CALL   012
....................      tus=1; 
0090:  MOVLW  01
0091:  MOVWF  20
....................      } 
....................      if(input(pin_d5)){ 
0092:  BSF    03.5
0093:  BSF    08.5
0094:  BCF    03.5
0095:  BTFSS  08.5
0096:  GOTO   09C
....................      delay_ms(20); 
0097:  MOVLW  14
0098:  MOVWF  22
0099:  CALL   012
....................      tus=4; 
009A:  MOVLW  04
009B:  MOVWF  20
....................      } 
....................      if(input(pin_d6)){ 
009C:  BSF    03.5
009D:  BSF    08.6
009E:  BCF    03.5
009F:  BTFSS  08.6
00A0:  GOTO   0A6
....................      delay_ms(50); 
00A1:  MOVLW  32
00A2:  MOVWF  22
00A3:  CALL   012
....................      tus=7; 
00A4:  MOVLW  07
00A5:  MOVWF  20
....................      } 
....................      output_low(pin_d2); 
00A6:  BSF    03.5
00A7:  BCF    08.2
00A8:  BCF    03.5
00A9:  BCF    08.2
....................      delay_ms(50); 
00AA:  MOVLW  32
00AB:  MOVWF  22
00AC:  CALL   012
....................     
....................    return tus;   
00AD:  MOVF   20,W
00AE:  MOVWF  78
00AF:  BCF    0A.3
00B0:  BCF    0A.4
00B1:  GOTO   0C2 (RETURN)
....................    } 
.................... void main() 
00B2:  BSF    03.5
00B3:  BSF    1F.0
00B4:  BSF    1F.1
00B5:  BSF    1F.2
00B6:  BCF    1F.3
00B7:  MOVLW  07
00B8:  MOVWF  1C
00B9:  BCF    03.7
00BA:  MOVLW  1F
00BB:  ANDWF  03,F
.................... {   
....................    const int digit[10]={0x3F, 0x06, 0x5B, 0x4F, 0x66, 0x6D, 0x7D, 0x07, 0x7F, 0x6F};   
....................    set_tris_b(0x00); 
00BC:  MOVLW  00
00BD:  MOVWF  06
....................    set_tris_d(0x0f); 
00BE:  MOVLW  0F
00BF:  MOVWF  08
....................    while(TRUE) 
....................    { 
....................    int donentus=keypad(); 
00C0:  BCF    03.5
00C1:  GOTO   026
00C2:  MOVF   78,W
00C3:  MOVWF  21
....................    output_b(digit[donentus]); 
00C4:  MOVF   21,W
00C5:  CALL   004
00C6:  MOVWF  22
00C7:  BSF    03.5
00C8:  CLRF   06
00C9:  BCF    03.5
00CA:  MOVF   22,W
00CB:  MOVWF  06
00CC:  GOTO   0C1
....................    } 
....................  
.................... } 
00CD:  SLEEP

Configuration Fuses:
   Word  1: 3F32   HS NOWDT PUT NOBROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
